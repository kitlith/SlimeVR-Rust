window.SIDEBAR_ITEMS = {"fn":[["check_if_okay_according_to_checkers",""],["type_asserts",""]],"struct":[["BorrowedFields","A struct for holding immutable references to all tail and immutably borrowed fields in an instance of `Data`."],["BorrowedMutFields","A struct for holding mutable references to all tail fields in an instance of `Data`."],["Data","The self-referencing struct."],["DataAsyncBuilder","A more verbose but stable way to construct self-referencing structs. It is comparable to using `StructName { field1: value1, field2: value2 }` rather than `StructName::new(value1, value2)`. This has the dual benefit of making your code both easier to refactor and more readable. Call `build()` to construct the actual struct. The fields of this struct should be used as follows:"],["DataAsyncSendBuilder","A more verbose but stable way to construct self-referencing structs. It is comparable to using `StructName { field1: value1, field2: value2 }` rather than `StructName::new(value1, value2)`. This has the dual benefit of making your code both easier to refactor and more readable. Call `build()` to construct the actual struct. The fields of this struct should be used as follows:"],["DataAsyncSendTryBuilder","A more verbose but stable way to construct self-referencing structs. It is comparable to using `StructName { field1: value1, field2: value2 }` rather than `StructName::new(value1, value2)`. This has the dual benefit of makin your code both easier to refactor and more readable. Call `try_build()` or `try_build_or_recover()` to construct the actual struct. The fields of this struct should be used as follows:"],["DataAsyncTryBuilder","A more verbose but stable way to construct self-referencing structs. It is comparable to using `StructName { field1: value1, field2: value2 }` rather than `StructName::new(value1, value2)`. This has the dual benefit of makin your code both easier to refactor and more readable. Call `try_build()` or `try_build_or_recover()` to construct the actual struct. The fields of this struct should be used as follows:"],["DataBuilder","A more verbose but stable way to construct self-referencing structs. It is comparable to using `StructName { field1: value1, field2: value2 }` rather than `StructName::new(value1, value2)`. This has the dual benefit of making your code both easier to refactor and more readable. Call `build()` to construct the actual struct. The fields of this struct should be used as follows:"],["DataTryBuilder","A more verbose but stable way to construct self-referencing structs. It is comparable to using `StructName { field1: value1, field2: value2 }` rather than `StructName::new(value1, value2)`. This has the dual benefit of makin your code both easier to refactor and more readable. Call `try_build()` or `try_build_or_recover()` to construct the actual struct. The fields of this struct should be used as follows:"],["Heads","A struct which contains only the head fields of `Data`."]]};